/*
 * langfuse
 * ## Authentication  Authenticate with the API using Basic Auth, get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateScoreRequest;
import com.konfigthis.client.model.Score;
import com.konfigthis.client.model.Scores;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScoreApi
 */
@Disabled
public class ScoreApiTest {

    private static ScoreApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ScoreApi(apiClient);
    }

    /**
     * Create a score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String traceId = null;
        String name = null;
        Double value = null;
        String id = null;
        String observationId = null;
        String comment = null;
        Score response = api.create(traceId, name, value)
                .id(id)
                .observationId(observationId)
                .comment(comment)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String scoreId = null;
        api.delete(scoreId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of scores
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String userId = null;
        String name = null;
        Scores response = api.get()
                .page(page)
                .limit(limit)
                .userId(userId)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String scoreId = null;
        Score response = api.getById(scoreId)
                .execute();
        // TODO: test validations
    }

}
