/*
 * langfuse
 * ## Authentication  Authenticate with the API using Basic Auth, get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Observation;
import com.konfigthis.client.model.ObservationsViews;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObservationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObservationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ObservationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCall(String observationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/public/observations/{observationId}"
            .replace("{" + "observationId" + "}", localVarApiClient.escapeString(observationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String observationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'observationId' is set
        if (observationId == null) {
            throw new ApiException("Missing the required parameter 'observationId' when calling get(Async)");
        }

        return getCall(observationId, _callback);

    }


    private ApiResponse<Observation> getWithHttpInfo(String observationId) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(observationId, null);
        Type localVarReturnType = new TypeToken<Observation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String observationId, final ApiCallback<Observation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(observationId, _callback);
        Type localVarReturnType = new TypeToken<Observation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {
        private final String observationId;

        private GetRequestBuilder(String observationId) {
            this.observationId = observationId;
        }

        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(observationId, _callback);
        }


        /**
         * Execute get request
         * @return Observation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Observation execute() throws ApiException {
            ApiResponse<Observation> localVarResp = getWithHttpInfo(observationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;Observation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Observation> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(observationId);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Observation> _callback) throws ApiException {
            return getAsync(observationId, _callback);
        }
    }

    /**
     * 
     * Get a observation
     * @param observationId The unique langfuse identifier of an observation, can be an event, span or generation (required)
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get(String observationId) throws IllegalArgumentException {
        if (observationId == null) throw new IllegalArgumentException("\"observationId\" is required but got null");
            

        return new GetRequestBuilder(observationId);
    }
    private okhttp3.Call getManyCall(Integer page, Integer limit, String name, String userId, String type, String traceId, String parentObservationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/public/observations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (traceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("traceId", traceId));
        }

        if (parentObservationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentObservationId", parentObservationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManyValidateBeforeCall(Integer page, Integer limit, String name, String userId, String type, String traceId, String parentObservationId, final ApiCallback _callback) throws ApiException {
        return getManyCall(page, limit, name, userId, type, traceId, parentObservationId, _callback);

    }


    private ApiResponse<ObservationsViews> getManyWithHttpInfo(Integer page, Integer limit, String name, String userId, String type, String traceId, String parentObservationId) throws ApiException {
        okhttp3.Call localVarCall = getManyValidateBeforeCall(page, limit, name, userId, type, traceId, parentObservationId, null);
        Type localVarReturnType = new TypeToken<ObservationsViews>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getManyAsync(Integer page, Integer limit, String name, String userId, String type, String traceId, String parentObservationId, final ApiCallback<ObservationsViews> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManyValidateBeforeCall(page, limit, name, userId, type, traceId, parentObservationId, _callback);
        Type localVarReturnType = new TypeToken<ObservationsViews>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetManyRequestBuilder {
        private Integer page;
        private Integer limit;
        private String name;
        private String userId;
        private String type;
        private String traceId;
        private String parentObservationId;

        private GetManyRequestBuilder() {
        }

        /**
         * Set page
         * @param page  (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set userId
         * @param userId  (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set traceId
         * @param traceId  (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder traceId(String traceId) {
            this.traceId = traceId;
            return this;
        }
        
        /**
         * Set parentObservationId
         * @param parentObservationId  (optional)
         * @return GetManyRequestBuilder
         */
        public GetManyRequestBuilder parentObservationId(String parentObservationId) {
            this.parentObservationId = parentObservationId;
            return this;
        }
        
        /**
         * Build call for getMany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getManyCall(page, limit, name, userId, type, traceId, parentObservationId, _callback);
        }


        /**
         * Execute getMany request
         * @return ObservationsViews
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ObservationsViews execute() throws ApiException {
            ApiResponse<ObservationsViews> localVarResp = getManyWithHttpInfo(page, limit, name, userId, type, traceId, parentObservationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMany request with HTTP info returned
         * @return ApiResponse&lt;ObservationsViews&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ObservationsViews> executeWithHttpInfo() throws ApiException {
            return getManyWithHttpInfo(page, limit, name, userId, type, traceId, parentObservationId);
        }

        /**
         * Execute getMany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ObservationsViews> _callback) throws ApiException {
            return getManyAsync(page, limit, name, userId, type, traceId, parentObservationId, _callback);
        }
    }

    /**
     * 
     * Get a list of observations
     * @return GetManyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetManyRequestBuilder getMany() throws IllegalArgumentException {
        return new GetManyRequestBuilder();
    }
}
