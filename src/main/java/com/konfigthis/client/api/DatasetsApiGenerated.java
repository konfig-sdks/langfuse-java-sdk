/*
 * langfuse
 * ## Authentication  Authenticate with the API using Basic Auth, get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateDatasetRequest;
import com.konfigthis.client.model.Dataset;
import com.konfigthis.client.model.DatasetRun;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DatasetsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatasetsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DatasetsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(CreateDatasetRequest createDatasetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDatasetRequest;

        // create path and map variables
        String localVarPath = "/api/public/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(CreateDatasetRequest createDatasetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDatasetRequest' is set
        if (createDatasetRequest == null) {
            throw new ApiException("Missing the required parameter 'createDatasetRequest' when calling create(Async)");
        }

        return createCall(createDatasetRequest, _callback);

    }


    private ApiResponse<Dataset> createWithHttpInfo(CreateDatasetRequest createDatasetRequest) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(createDatasetRequest, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(CreateDatasetRequest createDatasetRequest, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(createDatasetRequest, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final String name;

        private CreateRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateDatasetRequest createDatasetRequest = buildBodyParams();
            return createCall(createDatasetRequest, _callback);
        }

        private CreateDatasetRequest buildBodyParams() {
            CreateDatasetRequest createDatasetRequest = new CreateDatasetRequest();
            createDatasetRequest.name(this.name);
            return createDatasetRequest;
        }

        /**
         * Execute create request
         * @return Dataset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Dataset execute() throws ApiException {
            CreateDatasetRequest createDatasetRequest = buildBodyParams();
            ApiResponse<Dataset> localVarResp = createWithHttpInfo(createDatasetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;Dataset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Dataset> executeWithHttpInfo() throws ApiException {
            CreateDatasetRequest createDatasetRequest = buildBodyParams();
            return createWithHttpInfo(createDatasetRequest);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Dataset> _callback) throws ApiException {
            CreateDatasetRequest createDatasetRequest = buildBodyParams();
            return createAsync(createDatasetRequest, _callback);
        }
    }

    /**
     * 
     * Create a dataset
     * @param createDatasetRequest  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateRequestBuilder(name);
    }
    private okhttp3.Call getCall(String datasetName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/public/datasets/{datasetName}"
            .replace("{" + "datasetName" + "}", localVarApiClient.escapeString(datasetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String datasetName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetName' is set
        if (datasetName == null) {
            throw new ApiException("Missing the required parameter 'datasetName' when calling get(Async)");
        }

        return getCall(datasetName, _callback);

    }


    private ApiResponse<Dataset> getWithHttpInfo(String datasetName) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(datasetName, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String datasetName, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(datasetName, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {
        private final String datasetName;

        private GetRequestBuilder(String datasetName) {
            this.datasetName = datasetName;
        }

        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(datasetName, _callback);
        }


        /**
         * Execute get request
         * @return Dataset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Dataset execute() throws ApiException {
            ApiResponse<Dataset> localVarResp = getWithHttpInfo(datasetName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;Dataset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Dataset> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(datasetName);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Dataset> _callback) throws ApiException {
            return getAsync(datasetName, _callback);
        }
    }

    /**
     * 
     * Get a dataset and its items
     * @param datasetName  (required)
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get(String datasetName) throws IllegalArgumentException {
        if (datasetName == null) throw new IllegalArgumentException("\"datasetName\" is required but got null");
            

        return new GetRequestBuilder(datasetName);
    }
    private okhttp3.Call getRunsCall(String datasetName, String runName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/public/datasets/{datasetName}/runs/{runName}"
            .replace("{" + "datasetName" + "}", localVarApiClient.escapeString(datasetName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRunsValidateBeforeCall(String datasetName, String runName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetName' is set
        if (datasetName == null) {
            throw new ApiException("Missing the required parameter 'datasetName' when calling getRuns(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling getRuns(Async)");
        }

        return getRunsCall(datasetName, runName, _callback);

    }


    private ApiResponse<DatasetRun> getRunsWithHttpInfo(String datasetName, String runName) throws ApiException {
        okhttp3.Call localVarCall = getRunsValidateBeforeCall(datasetName, runName, null);
        Type localVarReturnType = new TypeToken<DatasetRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRunsAsync(String datasetName, String runName, final ApiCallback<DatasetRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRunsValidateBeforeCall(datasetName, runName, _callback);
        Type localVarReturnType = new TypeToken<DatasetRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRunsRequestBuilder {
        private final String datasetName;
        private final String runName;

        private GetRunsRequestBuilder(String datasetName, String runName) {
            this.datasetName = datasetName;
            this.runName = runName;
        }

        /**
         * Build call for getRuns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRunsCall(datasetName, runName, _callback);
        }


        /**
         * Execute getRuns request
         * @return DatasetRun
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public DatasetRun execute() throws ApiException {
            ApiResponse<DatasetRun> localVarResp = getRunsWithHttpInfo(datasetName, runName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRuns request with HTTP info returned
         * @return ApiResponse&lt;DatasetRun&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DatasetRun> executeWithHttpInfo() throws ApiException {
            return getRunsWithHttpInfo(datasetName, runName);
        }

        /**
         * Execute getRuns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DatasetRun> _callback) throws ApiException {
            return getRunsAsync(datasetName, runName, _callback);
        }
    }

    /**
     * 
     * Get a dataset run and its items
     * @param datasetName  (required)
     * @param runName  (required)
     * @return GetRunsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetRunsRequestBuilder getRuns(String datasetName, String runName) throws IllegalArgumentException {
        if (datasetName == null) throw new IllegalArgumentException("\"datasetName\" is required but got null");
            

        if (runName == null) throw new IllegalArgumentException("\"runName\" is required but got null");
            

        return new GetRunsRequestBuilder(datasetName, runName);
    }
}
