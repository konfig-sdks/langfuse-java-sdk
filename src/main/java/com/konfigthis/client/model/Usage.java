/*
 * langfuse
 * ## Authentication  Authenticate with the API using Basic Auth, get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ModelUsageUnit;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Standard interface for usage and cost
 */
@ApiModel(description = "Standard interface for usage and cost")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Usage {
  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private Integer input;

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private Integer output;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private ModelUsageUnit unit;

  public static final String SERIALIZED_NAME_INPUT_COST = "inputCost";
  @SerializedName(SERIALIZED_NAME_INPUT_COST)
  private Double inputCost;

  public static final String SERIALIZED_NAME_OUTPUT_COST = "outputCost";
  @SerializedName(SERIALIZED_NAME_OUTPUT_COST)
  private Double outputCost;

  public static final String SERIALIZED_NAME_TOTAL_COST = "totalCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private Double totalCost;

  public Usage() {
  }

  public Usage input(Integer input) {
    
    
    
    
    this.input = input;
    return this;
  }

   /**
   * Number of input units (e.g. tokens)
   * @return input
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of input units (e.g. tokens)")

  public Integer getInput() {
    return input;
  }


  public void setInput(Integer input) {
    
    
    
    this.input = input;
  }


  public Usage output(Integer output) {
    
    
    
    
    this.output = output;
    return this;
  }

   /**
   * Number of output units (e.g. tokens)
   * @return output
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of output units (e.g. tokens)")

  public Integer getOutput() {
    return output;
  }


  public void setOutput(Integer output) {
    
    
    
    this.output = output;
  }


  public Usage total(Integer total) {
    
    
    
    
    this.total = total;
    return this;
  }

   /**
   * Defaults to input+output if not set
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defaults to input+output if not set")

  public Integer getTotal() {
    return total;
  }


  public void setTotal(Integer total) {
    
    
    
    this.total = total;
  }


  public Usage unit(ModelUsageUnit unit) {
    
    
    
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelUsageUnit getUnit() {
    return unit;
  }


  public void setUnit(ModelUsageUnit unit) {
    
    
    
    this.unit = unit;
  }


  public Usage inputCost(Double inputCost) {
    
    
    
    
    this.inputCost = inputCost;
    return this;
  }

   /**
   * USD input cost
   * @return inputCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "USD input cost")

  public Double getInputCost() {
    return inputCost;
  }


  public void setInputCost(Double inputCost) {
    
    
    
    this.inputCost = inputCost;
  }


  public Usage outputCost(Double outputCost) {
    
    
    
    
    this.outputCost = outputCost;
    return this;
  }

   /**
   * USD output cost
   * @return outputCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "USD output cost")

  public Double getOutputCost() {
    return outputCost;
  }


  public void setOutputCost(Double outputCost) {
    
    
    
    this.outputCost = outputCost;
  }


  public Usage totalCost(Double totalCost) {
    
    
    
    
    this.totalCost = totalCost;
    return this;
  }

   /**
   * USD total cost, defaults to input+output
   * @return totalCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "USD total cost, defaults to input+output")

  public Double getTotalCost() {
    return totalCost;
  }


  public void setTotalCost(Double totalCost) {
    
    
    
    this.totalCost = totalCost;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Usage instance itself
   */
  public Usage putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Usage usage = (Usage) o;
    return Objects.equals(this.input, usage.input) &&
        Objects.equals(this.output, usage.output) &&
        Objects.equals(this.total, usage.total) &&
        Objects.equals(this.unit, usage.unit) &&
        Objects.equals(this.inputCost, usage.inputCost) &&
        Objects.equals(this.outputCost, usage.outputCost) &&
        Objects.equals(this.totalCost, usage.totalCost)&&
        Objects.equals(this.additionalProperties, usage.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, output, total, unit, inputCost, outputCost, totalCost, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Usage {\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    inputCost: ").append(toIndentedString(inputCost)).append("\n");
    sb.append("    outputCost: ").append(toIndentedString(outputCost)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("input");
    openapiFields.add("output");
    openapiFields.add("total");
    openapiFields.add("unit");
    openapiFields.add("inputCost");
    openapiFields.add("outputCost");
    openapiFields.add("totalCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Usage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Usage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Usage is not found in the empty JSON string", Usage.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Usage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Usage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Usage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Usage.class));

       return (TypeAdapter<T>) new TypeAdapter<Usage>() {
           @Override
           public void write(JsonWriter out, Usage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Usage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Usage instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Usage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Usage
  * @throws IOException if the JSON string is invalid with respect to Usage
  */
  public static Usage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Usage.class);
  }

 /**
  * Convert an instance of Usage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

